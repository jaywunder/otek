use std::str::FromStr;
use template::ast::Token;

grammar;

pub Template: Vec<Token> = {
    <v: (<Var> ",")*> <e: Var?> => {
        match e {
            None => v,
            Some(e) => {
                let mut v = v;
                v.push(e);
                v
            }
        }
    }
};

pub Var: Token = {
    <r"[[:alpha:]-_][[:alpha:]\d-_]+"> => Token::Var(String::from(<>)),
};

// QuotedText: String = {
//     "'"  <r"[^'\n\r]*">   "'"  => String::from(<>),
//     "\"" <r#"[^"\n\r]*"#> "\"" => String::from(<>),
// };

// OrBar:

Num: i32 = {
    r"[\d]+" => i32::from_str(<>).unwrap(),
};

match {r"[[:alpha:]-_][[:alpha:]\d-_]+"}
// else {r"[\d]+"}
// else {r"[^'\n\r]*"}
// else {r#"[^"\n\r]*"#}
else { _ }
